---
title: "Spotify Exploratory Data Analysis - Streaming History"
format: html
---

## Introduction

This is a series of exploratory data analysis (EDA) projects on my Spotify data. The data was downloaded from my Spotify account on July 23rd, 2023. The data is downloaded as a zip file containing several json files and saved on my personal google drive. The json files are then converted into tibbles for analysis using the `jsonlite` package.

This quarto document is the first of several EDA projects. This project focuses on my streaming history. I'm interested in exploring my listening habits across the time period of the data. I'm also interested in exploring my listening habits across the days of the week.

This process is documented in the following sections:

-   Setup and Configuration: Loading packages and googledrive API access

-   Data Loading: How to download and load the data?

-   Data Tidying: Get a tidy dataset

-   Data Cleaning: Ensure variables are in correct formats

-   Data Exploration: Answer one question and come up with two extra ones

Let's start exploring!

## Setup and Configuration

First, let's load in the packages we'll need for this project and authorise access to my google drive.

```{r}
### "Tidyverse"-oriented packages:

# The tidyverse is a collection of R packages designed for data science.
# All packages share a similar design philosophy, grammar, and data structures.
# Tidyverse includes packages such as:
# ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, lubridate, and forcats.
### https://www.tidyverse.org/
library(tidyverse)

# To easily create data visualisations with simple and consistent syntax and grammar.
# https://ggplot2.tidyverse.org/index.html
library(ggplot2)

# To allow interaction between files on Google Drive and R.
# https://googledrive.tidyverse.org/
library(googledrive)



### Other Packages:
# To easily create summary statistics to understand and explore data.
# https://docs.ropensci.org/skimr/
library(skimr)

# A fast JSON parser and generator.
### https://cran.r-project.org/web/packages/jsonlite/index.html
library(jsonlite)

# To easily enable file referencing in project-oriented workflows.
# https://here.r-lib.org/
library(here)



# Google Drive Authentication --------------------------------------------------

# To establish a connection between a Google Drive account and R.
drive_auth()

# Example of how to download from Google Drive
# drive_download(
#   # Where to download file from
#   "https://drive.google.com/file/d/1Fjq1r6016H4isB2Cx2wg-Xm9zY7lHhYV/view?usp=drive_link",
# 
#   # Where to save it locally
#   path = here("foldertest", "text2")
#   )

```

## Data Loading

To access the data, I need to download it from my google drive. The data is requested from Johann's Spotify account and downloaded as a zip file containing several json files. There are several different json files; however, for this analysis I'm only interested in the Streaming History files.

You will only have access if Johann has given you read access to the email you authorised in 0-00_setup_and_configuration.R.

```{r}
# Only download raw data if it hasn't already been downloaded
if(!dir.exists(here("raw_data"))) {
  dir.create(here("raw_data"), showWarnings = FALSE)

  # List contents of Spotify Analysis Folder
  spotify_dribble <- drive_ls("Spotify Analysis")
  
  # Download raw data
  map2(
    spotify_dribble$id,
    spotify_dribble$name,
    ~ drive_download(
      file = as_id(.x),
      path = here("raw_data", .y),
      overwrite = TRUE
    )
  )
}



# Read in individual raw json as nested lists
# JRAW = RAW JSON
# RAW_JSON causes alphabetical ordering inconveniences in R environment.
JRAW_STREAMING_HISTORY_0 <- read_json(
  path = here(
    "raw_data",
    "StreamingHistory0.json"
  )
)

JRAW_STREAMING_HISTORY_1 <- read_json(
  path = here(
    "raw_data",
    "StreamingHistory1.json"
  )
)

JRAW_STREAMING_HISTORY_2 <- read_json(
  path = here(
    "raw_data",
    "StreamingHistory2.json"
  )
)
```

## Data Tidying

These json files are then converted into tibbles for analysis using the `jsonlite` package. The tibbles are then combined into one tibble, as they all have the same columns. I suspect the reason why there are different files is because of the size of the data.

```{r}
RAW_STREAMING_HISTORY_0 <- JRAW_STREAMING_HISTORY_0 %>% 
  bind_rows() %>% 
  as_tibble()

RAW_STREAMING_HISTORY_1 <- JRAW_STREAMING_HISTORY_1 %>% 
  bind_rows() |> 
  as_tibble()

RAW_STREAMING_HISTORY_2 <- JRAW_STREAMING_HISTORY_2 %>% 
  bind_rows() |> 
  as_tibble()

# Combine all streaming history tibbles into one tibble
RAW_STREAMING_HISTORY <- bind_rows(
  RAW_STREAMING_HISTORY_0,
  RAW_STREAMING_HISTORY_1,
  RAW_STREAMING_HISTORY_2
)
```

## Data Cleaning

```{r}


CLEANED_STREAMING_HISTORY <- RAW_STREAMING_HISTORY |> 
  mutate(
    # Convert ms to minutes
    min_played = as.numeric(msPlayed / 60000),
    
    # Convert artistName to factor
    artist_name = as.factor(artistName),
    
    track_name = as.character(trackName),
    
    # Convert endTime into lubridate datetime
    streaming_datetime = as_date(endTime, format = "%Y-%m-%d %H:%M")
  ) |> 
  
  # Remove unnecessary columns
  select(
    artist_name,
    track_name,
    streaming_datetime,
    min_played
  )
```

## Data Exploration

### Sanity Checks

There are `r nrow(CLEANED_STREAMING_HISTORY)` rows in the CLEANED_STREAMING_HISTORY tibble, which is the number of songs/podcast episodes that I have listened to between `r min(CLEANED_STREAMING_HISTORY$streaming_datetime)` and `r max(CLEANED_STREAMING_HISTORY$streaming_datetime)`. Let's use the function `skim()` from the skimr package to get a sense check of the data.

```{r}
CLEANED_STREAMING_HISTORY |> 
  skim()
```

There are `r ncol(CLEANED_STREAMING_HISTORY)` columns in the CLEANED_STREAMING_HISTORY tibble. There are `r distinct(CLEANED_STREAMING_HISTORY, artist_name) |> nrow()` unique artists and `r distinct(CLEANED_STREAMING_HISTORY, track_name) |> nrow()` unique tracks in the CLEANED_STREAMING_HISTORY tibble. It is interesting that the shortest `track_name` has a length of `r  min(str_length(CLEANED_STREAMING_HISTORY$track_name))` characters and the longest `track_name` has a length of `r max(str_length(CLEANED_STREAMING_HISTORY$track_name))` characters. Interestingly, the shortest `track_name` has a length of `r min(str_length(CLEANED_STREAMING_HISTORY$artist_name))` characters. The date ranges between `r min(CLEANED_STREAMING_HISTORY$streaming_datetime)` and `r max(CLEANED_STREAMING_HISTORY$streaming_datetime)`.

### Streaming per day

```{r}
STREAMING_HISTORY_PER_DAY <- CLEANED_STREAMING_HISTORY |> 
  group_by(streaming_datetime) |>
  summarise(
    total_hours_played = sum(min_played / 60)
  )
```

#### What were the top 5 days I listened to music?

Let's also investigate what days of the week these top 5 days were.

```{r}
STREAMING_HISTORY_PER_DAY |> 
  mutate(
    day_of_week = wday(streaming_datetime, label = TRUE)
  ) |> 
  arrange(desc(total_hours_played)) |> 
  head(5)
```

It seems like 2023-05-30 and 2023-02-18 were two days when I listened to a LOT of music. I wonder what the most listened to days are?

```{r}
STREAMING_HISTORY_PER_DAY |> 
  mutate(
    day_of_week = wday(streaming_datetime, label = TRUE)
    ) |> 
  group_by(day_of_week) |>
  summarise(
    total_hours_played = sum(total_hours_played)
  ) |>
  arrange(desc(total_hours_played))
```

Surprisingly, it seems like Mondays are the days where I have listened to the most streamed music. I wonder if this is because I listen to music on my commute to work? Although, I don't think I was really working consistently in 2022-23.

#### How did my streaming time vary by day?

Let's plot the total hours played per day.

```{r}
GGPLOT_HOURS_PLAYED_PER_DAY <- STREAMING_HISTORY_PER_DAY |> 
  ggplot(aes(x = streaming_datetime, y = total_hours_played)) +
  
  geom_point() +
  geom_line() +
  
  labs(
    x = "",
    y = "Hours Played",
    title = "Hours Played Per Day",
    subtitle = "Spotify Streaming History"
  ) +
  
  theme_minimal() +
  theme(
    plot.title = element_text(
      size = 20,
      face = "bold"
    ),
    plot.subtitle = element_text(
      size = 15
    ),
    axis.title = element_text(
      size = 15
    ),
    axis.text = element_text(
      size = 10
    )
  )

GGPLOT_HOURS_PLAYED_PER_DAY
```

There is a high fluctuation in the number of hours played per day with some days, when very little music was played and some days were a lot of music was played. It seems that there are two days in particular, where I have listened to a lot of music. Let's investigate these days further, we know that the days are: 2023-05-30 and 2023-02-18. What did I do on these two days? Let's also include a smoothed line.

```{r}
GGPLOT_HOURS_PLAYED_PER_DAY +
  
  geom_point(aes(
    colour = ifelse(
      streaming_datetime == as.Date("2023-05-30") | 
        streaming_datetime == as.Date("2023-02-18"),
      "red",
      "darkgrey"
    )
    )
  ) +
  geom_line(colour = "darkgrey") +
  geom_smooth() +
  geom_label(
    label = "Flying to Australia",
    x = as.Date("2023-05-30"),
    y = STREAMING_HISTORY_PER_DAY |> 
      filter(streaming_datetime == as.Date("2023-05-30")) |> 
      pull(total_hours_played),
    vjust = -0.5
  ) +
  geom_label(
    label = "Flying to Austria",
    x = as.Date("2023-02-18"),
    y = STREAMING_HISTORY_PER_DAY |> 
      filter(streaming_datetime == as.Date("2023-02-18")) |> 
      pull(total_hours_played),
    vjust = -0.5
  ) +
    expand_limits(
    y = c(0, 20)
  ) +
  scale_color_identity()
```

#### How did my streaming time vary by month?

Flying in the plane and listening to music! That makes sense. The smoothed line suggests that there was more music listened to in the second half of 2022 than the first half of 2023. Let's investigate this further: what was the average number of hours played per month and let's aggregate this by year as well.

```{r}
STREAMING_HISTORY_PER_MONTH <- CLEANED_STREAMING_HISTORY |> 
  mutate(
    month_floor = floor_date(streaming_datetime, unit = "month"),
    year_floor = floor_date(streaming_datetime, unit = "year")
  ) |> 
  group_by(month_floor, year_floor) |>
  summarise(
    total_hours_played = sum(min_played / 60)
  )
```

Let's plot the total hours played per month.

```{r}
GGPLOT_HOURS_PLAYED_PER_MONTH <- STREAMING_HISTORY_PER_MONTH |> 
  ggplot(aes(x = month_floor, y = total_hours_played)) +
  
  geom_point() +
  geom_line() +
  
  labs(
    x = "",
    y = "Hours Played",
    title = "Hours Played Per Month",
    subtitle = "Spotify Streaming History"
  ) +
  
  theme_minimal() +
  theme(
    plot.title = element_text(
      size = 20,
      face = "bold"
    ),
    plot.subtitle = element_text(
      size = 15
    ),
    axis.title = element_text(
      size = 15
    ),
    axis.text = element_text(
      size = 10
    )
  )

GGPLOT_HOURS_PLAYED_PER_MONTH
```

There is a high fluctuation in the number of hours played per month with some months, when very little music was played and some months were a lot of music was played (October and November 2022). Let's calculate the total number of hours played in both years.

```{r}
STREAMING_HISTORY_PER_MONTH |> 
  group_by(year_floor) |>
  summarise(
    average_hours_played = mean(total_hours_played)
  )
```

There definitely seems like there is a major difference between the two years.

#### Who were my top artists and top songs?

Let's investigate who my top artists. We will do this by grouping by artist name and then calculating the total number of hours played.

```{r}

CLEANED_STREAMING_HISTORY |> 
  group_by(artist_name) |>
  summarise(
    total_hours_played = sum(min_played / 60)
  ) |> 
  arrange(desc(total_hours_played)) |> 
  head(10)
```

Let's look at the top artists for each month.

```{r}
CLEANED_STREAMING_HISTORY |> 
  mutate(
    month_floor = floor_date(streaming_datetime, unit = "month")
  ) |> 
  group_by(month_floor, artist_name) |>
  summarise(
    total_hours_played = sum(min_played / 60)
  ) |> 
  arrange(desc(total_hours_played)) |> 
  group_by(month_floor) |> 
  slice(1)

```

Wow, Parcels really was my favourite artist consistently throughout the year. Let's move onto top songs. We will do this by grouping by track name and then calculating the total number of hours played.

```{r}
CLEANED_STREAMING_HISTORY |> 
  group_by(track_name) |>
  summarise(
    total_hours_played = sum(min_played / 60)
  ) |> 
  arrange(desc(total_hours_played)) |> 
  head(10)
```

Interestingly, the top songs were not all by Parcels, although four out of the top 10 were.

Let's look at the top songs for each month.

```{r}
CLEANED_STREAMING_HISTORY |> 
  mutate(
    month_floor = floor_date(streaming_datetime, unit = "month")
  ) |> 
  group_by(month_floor, track_name) |>
  summarise(
    total_hours_played = sum(min_played / 60)
  ) |> 
  arrange(desc(total_hours_played)) |> 
  group_by(month_floor) |> 
  slice(1)
```

#### How did my top 10 songs vary across time?

Let's investigate how my top 10 songs varied across time. We will do this by grouping by track name and then calculating the total number of hours played.

```{r}
top_ten_songs <- CLEANED_STREAMING_HISTORY |> 
  group_by(track_name) |>
  summarise(
    total_hours_played = sum(min_played / 60)
  ) |> 
  arrange(desc(total_hours_played)) |> 
  head(5) |> 
  pull(track_name)

CLEANED_STREAMING_HISTORY |>
  filter(track_name %in% top_ten_songs) |> 
  mutate(
    month_floor = floor_date(streaming_datetime, unit = "month")
  ) |>
  group_by(month_floor, track_name) |>
  summarise(
    total_hours_played = sum(min_played / 60)
  ) |>
  ggplot(aes(x = month_floor, y = total_hours_played, colour = track_name)) +
  
  geom_point() +
  geom_line() +
  
  labs(
    x = "",
    y = "Hours Played",
    title = "Top 5 Songs - Hours Played Per Day",
    subtitle = "Spotify Streaming History"
  ) +
  
  theme_minimal() +
  theme(
    plot.title = element_text(
      size = 20,
      face = "bold"
    ),
    plot.subtitle = element_text(
      size = 15
    ),
    axis.title = element_text(
      size = 15
    ),
    axis.text = element_text(
      size = 10
    )
  )


```

This is super interesting. It seems that there are some rough patterns in my top 5 songs. For example, "Lost in Music - Dimitri from Paris Remix" was played a lot in the first half of 2022 and then not at all in the first half of 2023. Similarly, "The Girl" has a similar downwards trend. "Tieduprightnow" was played a lot in the new year (2023); however, also dropped. "Free" and "Bitter Sweet Symphony" were almost perfectly positively correlated with each other with the exception of late 2022.

I wonder if I could do this analysis for all of my songs and then create a grouping/cluster analysis to see if there are any temporal patterns in my music listening? Are there some songs that I listen to with other songs? Do these songs group together because I usually listen to them from the same playlist? Can I somehow link/predict my playlist data and my streaming data?

These are all future questions that I would like to explore in future! But for now, these were some great first initial data explorations of my Spotify streaming history. I hope you enjoyed reading this blog post and I hope you learned something new about Spotify streaming history data analysis. If you have any questions or comments, please feel free to reach out to me. I would love to hear from you! :)

https://rpubs.com/johann-wagner/1133553
